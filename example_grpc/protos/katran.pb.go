// Code generated by protoc-gen-go. DO NOT EDIT.
// source: katran.proto

package lb_katran

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Action int32

const (
	Action_ADD Action = 0
	Action_DEL Action = 1
)

var Action_name = map[int32]string{
	0: "ADD",
	1: "DEL",
}
var Action_value = map[string]int32{
	"ADD": 0,
	"DEL": 1,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}
func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{0}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Bool struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bool) Reset()         { *m = Bool{} }
func (m *Bool) String() string { return proto.CompactTextString(m) }
func (*Bool) ProtoMessage()    {}
func (*Bool) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{1}
}
func (m *Bool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bool.Unmarshal(m, b)
}
func (m *Bool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bool.Marshal(b, m, deterministic)
}
func (dst *Bool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bool.Merge(dst, src)
}
func (m *Bool) XXX_Size() int {
	return xxx_messageInfo_Bool.Size(m)
}
func (m *Bool) XXX_DiscardUnknown() {
	xxx_messageInfo_Bool.DiscardUnknown(m)
}

var xxx_messageInfo_Bool proto.InternalMessageInfo

func (m *Bool) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Vip struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Protocol             int32    `protobuf:"varint,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vip) Reset()         { *m = Vip{} }
func (m *Vip) String() string { return proto.CompactTextString(m) }
func (*Vip) ProtoMessage()    {}
func (*Vip) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{2}
}
func (m *Vip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vip.Unmarshal(m, b)
}
func (m *Vip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vip.Marshal(b, m, deterministic)
}
func (dst *Vip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vip.Merge(dst, src)
}
func (m *Vip) XXX_Size() int {
	return xxx_messageInfo_Vip.Size(m)
}
func (m *Vip) XXX_DiscardUnknown() {
	xxx_messageInfo_Vip.DiscardUnknown(m)
}

var xxx_messageInfo_Vip proto.InternalMessageInfo

func (m *Vip) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Vip) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Vip) GetProtocol() int32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

type VipMeta struct {
	Vip   *Vip  `protobuf:"bytes,1,opt,name=vip,proto3" json:"vip,omitempty"`
	Flags int64 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	//
	// setFlag controls if we setting this flags or removing it from the VIP
	SetFlag              bool     `protobuf:"varint,3,opt,name=setFlag,proto3" json:"setFlag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipMeta) Reset()         { *m = VipMeta{} }
func (m *VipMeta) String() string { return proto.CompactTextString(m) }
func (*VipMeta) ProtoMessage()    {}
func (*VipMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{3}
}
func (m *VipMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VipMeta.Unmarshal(m, b)
}
func (m *VipMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VipMeta.Marshal(b, m, deterministic)
}
func (dst *VipMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipMeta.Merge(dst, src)
}
func (m *VipMeta) XXX_Size() int {
	return xxx_messageInfo_VipMeta.Size(m)
}
func (m *VipMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_VipMeta.DiscardUnknown(m)
}

var xxx_messageInfo_VipMeta proto.InternalMessageInfo

func (m *VipMeta) GetVip() *Vip {
	if m != nil {
		return m.Vip
	}
	return nil
}

func (m *VipMeta) GetFlags() int64 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *VipMeta) GetSetFlag() bool {
	if m != nil {
		return m.SetFlag
	}
	return false
}

type Real struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Weight               int32    `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Real) Reset()         { *m = Real{} }
func (m *Real) String() string { return proto.CompactTextString(m) }
func (*Real) ProtoMessage()    {}
func (*Real) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{4}
}
func (m *Real) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Real.Unmarshal(m, b)
}
func (m *Real) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Real.Marshal(b, m, deterministic)
}
func (dst *Real) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Real.Merge(dst, src)
}
func (m *Real) XXX_Size() int {
	return xxx_messageInfo_Real.Size(m)
}
func (m *Real) XXX_DiscardUnknown() {
	xxx_messageInfo_Real.DiscardUnknown(m)
}

var xxx_messageInfo_Real proto.InternalMessageInfo

func (m *Real) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Real) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type QuicReal struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuicReal) Reset()         { *m = QuicReal{} }
func (m *QuicReal) String() string { return proto.CompactTextString(m) }
func (*QuicReal) ProtoMessage()    {}
func (*QuicReal) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{5}
}
func (m *QuicReal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuicReal.Unmarshal(m, b)
}
func (m *QuicReal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuicReal.Marshal(b, m, deterministic)
}
func (dst *QuicReal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuicReal.Merge(dst, src)
}
func (m *QuicReal) XXX_Size() int {
	return xxx_messageInfo_QuicReal.Size(m)
}
func (m *QuicReal) XXX_DiscardUnknown() {
	xxx_messageInfo_QuicReal.DiscardUnknown(m)
}

var xxx_messageInfo_QuicReal proto.InternalMessageInfo

func (m *QuicReal) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QuicReal) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Mac struct {
	Mac                  string   `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Mac) Reset()         { *m = Mac{} }
func (m *Mac) String() string { return proto.CompactTextString(m) }
func (*Mac) ProtoMessage()    {}
func (*Mac) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{6}
}
func (m *Mac) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mac.Unmarshal(m, b)
}
func (m *Mac) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mac.Marshal(b, m, deterministic)
}
func (dst *Mac) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mac.Merge(dst, src)
}
func (m *Mac) XXX_Size() int {
	return xxx_messageInfo_Mac.Size(m)
}
func (m *Mac) XXX_DiscardUnknown() {
	xxx_messageInfo_Mac.DiscardUnknown(m)
}

var xxx_messageInfo_Mac proto.InternalMessageInfo

func (m *Mac) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type Stats struct {
	V1                   uint64   `protobuf:"varint,1,opt,name=v1,proto3" json:"v1,omitempty"`
	V2                   uint64   `protobuf:"varint,2,opt,name=v2,proto3" json:"v2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Stats) Reset()         { *m = Stats{} }
func (m *Stats) String() string { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()    {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{7}
}
func (m *Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stats.Unmarshal(m, b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
}
func (dst *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(dst, src)
}
func (m *Stats) XXX_Size() int {
	return xxx_messageInfo_Stats.Size(m)
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

func (m *Stats) GetV1() uint64 {
	if m != nil {
		return m.V1
	}
	return 0
}

func (m *Stats) GetV2() uint64 {
	if m != nil {
		return m.V2
	}
	return 0
}

type Healthcheck struct {
	Somark               uint32   `protobuf:"varint,1,opt,name=somark,proto3" json:"somark,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Healthcheck) Reset()         { *m = Healthcheck{} }
func (m *Healthcheck) String() string { return proto.CompactTextString(m) }
func (*Healthcheck) ProtoMessage()    {}
func (*Healthcheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{8}
}
func (m *Healthcheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Healthcheck.Unmarshal(m, b)
}
func (m *Healthcheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Healthcheck.Marshal(b, m, deterministic)
}
func (dst *Healthcheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Healthcheck.Merge(dst, src)
}
func (m *Healthcheck) XXX_Size() int {
	return xxx_messageInfo_Healthcheck.Size(m)
}
func (m *Healthcheck) XXX_DiscardUnknown() {
	xxx_messageInfo_Healthcheck.DiscardUnknown(m)
}

var xxx_messageInfo_Healthcheck proto.InternalMessageInfo

func (m *Healthcheck) GetSomark() uint32 {
	if m != nil {
		return m.Somark
	}
	return 0
}

func (m *Healthcheck) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type HcMap struct {
	Healthchecks         map[int32]string `protobuf:"bytes,1,rep,name=healthchecks,proto3" json:"healthchecks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *HcMap) Reset()         { *m = HcMap{} }
func (m *HcMap) String() string { return proto.CompactTextString(m) }
func (*HcMap) ProtoMessage()    {}
func (*HcMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{9}
}
func (m *HcMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HcMap.Unmarshal(m, b)
}
func (m *HcMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HcMap.Marshal(b, m, deterministic)
}
func (dst *HcMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HcMap.Merge(dst, src)
}
func (m *HcMap) XXX_Size() int {
	return xxx_messageInfo_HcMap.Size(m)
}
func (m *HcMap) XXX_DiscardUnknown() {
	xxx_messageInfo_HcMap.DiscardUnknown(m)
}

var xxx_messageInfo_HcMap proto.InternalMessageInfo

func (m *HcMap) GetHealthchecks() map[int32]string {
	if m != nil {
		return m.Healthchecks
	}
	return nil
}

type Reals struct {
	Reals                []*Real  `protobuf:"bytes,1,rep,name=reals,proto3" json:"reals,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reals) Reset()         { *m = Reals{} }
func (m *Reals) String() string { return proto.CompactTextString(m) }
func (*Reals) ProtoMessage()    {}
func (*Reals) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{10}
}
func (m *Reals) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reals.Unmarshal(m, b)
}
func (m *Reals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reals.Marshal(b, m, deterministic)
}
func (dst *Reals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reals.Merge(dst, src)
}
func (m *Reals) XXX_Size() int {
	return xxx_messageInfo_Reals.Size(m)
}
func (m *Reals) XXX_DiscardUnknown() {
	xxx_messageInfo_Reals.DiscardUnknown(m)
}

var xxx_messageInfo_Reals proto.InternalMessageInfo

func (m *Reals) GetReals() []*Real {
	if m != nil {
		return m.Reals
	}
	return nil
}

type Vips struct {
	Vips                 []*Vip   `protobuf:"bytes,1,rep,name=vips,proto3" json:"vips,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vips) Reset()         { *m = Vips{} }
func (m *Vips) String() string { return proto.CompactTextString(m) }
func (*Vips) ProtoMessage()    {}
func (*Vips) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{11}
}
func (m *Vips) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vips.Unmarshal(m, b)
}
func (m *Vips) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vips.Marshal(b, m, deterministic)
}
func (dst *Vips) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vips.Merge(dst, src)
}
func (m *Vips) XXX_Size() int {
	return xxx_messageInfo_Vips.Size(m)
}
func (m *Vips) XXX_DiscardUnknown() {
	xxx_messageInfo_Vips.DiscardUnknown(m)
}

var xxx_messageInfo_Vips proto.InternalMessageInfo

func (m *Vips) GetVips() []*Vip {
	if m != nil {
		return m.Vips
	}
	return nil
}

type QuicReals struct {
	Qreals               []*QuicReal `protobuf:"bytes,1,rep,name=qreals,proto3" json:"qreals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *QuicReals) Reset()         { *m = QuicReals{} }
func (m *QuicReals) String() string { return proto.CompactTextString(m) }
func (*QuicReals) ProtoMessage()    {}
func (*QuicReals) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{12}
}
func (m *QuicReals) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuicReals.Unmarshal(m, b)
}
func (m *QuicReals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuicReals.Marshal(b, m, deterministic)
}
func (dst *QuicReals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuicReals.Merge(dst, src)
}
func (m *QuicReals) XXX_Size() int {
	return xxx_messageInfo_QuicReals.Size(m)
}
func (m *QuicReals) XXX_DiscardUnknown() {
	xxx_messageInfo_QuicReals.DiscardUnknown(m)
}

var xxx_messageInfo_QuicReals proto.InternalMessageInfo

func (m *QuicReals) GetQreals() []*QuicReal {
	if m != nil {
		return m.Qreals
	}
	return nil
}

type ModifiedRealsForVip struct {
	Action               Action   `protobuf:"varint,1,opt,name=action,proto3,enum=lb.katran.Action" json:"action,omitempty"`
	Real                 *Reals   `protobuf:"bytes,2,opt,name=real,proto3" json:"real,omitempty"`
	Vip                  *Vip     `protobuf:"bytes,3,opt,name=vip,proto3" json:"vip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModifiedRealsForVip) Reset()         { *m = ModifiedRealsForVip{} }
func (m *ModifiedRealsForVip) String() string { return proto.CompactTextString(m) }
func (*ModifiedRealsForVip) ProtoMessage()    {}
func (*ModifiedRealsForVip) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{13}
}
func (m *ModifiedRealsForVip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModifiedRealsForVip.Unmarshal(m, b)
}
func (m *ModifiedRealsForVip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModifiedRealsForVip.Marshal(b, m, deterministic)
}
func (dst *ModifiedRealsForVip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifiedRealsForVip.Merge(dst, src)
}
func (m *ModifiedRealsForVip) XXX_Size() int {
	return xxx_messageInfo_ModifiedRealsForVip.Size(m)
}
func (m *ModifiedRealsForVip) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifiedRealsForVip.DiscardUnknown(m)
}

var xxx_messageInfo_ModifiedRealsForVip proto.InternalMessageInfo

func (m *ModifiedRealsForVip) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return Action_ADD
}

func (m *ModifiedRealsForVip) GetReal() *Reals {
	if m != nil {
		return m.Real
	}
	return nil
}

func (m *ModifiedRealsForVip) GetVip() *Vip {
	if m != nil {
		return m.Vip
	}
	return nil
}

type ModifiedQuicReals struct {
	Action               Action     `protobuf:"varint,1,opt,name=action,proto3,enum=lb.katran.Action" json:"action,omitempty"`
	Reals                *QuicReals `protobuf:"bytes,2,opt,name=reals,proto3" json:"reals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ModifiedQuicReals) Reset()         { *m = ModifiedQuicReals{} }
func (m *ModifiedQuicReals) String() string { return proto.CompactTextString(m) }
func (*ModifiedQuicReals) ProtoMessage()    {}
func (*ModifiedQuicReals) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{14}
}
func (m *ModifiedQuicReals) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModifiedQuicReals.Unmarshal(m, b)
}
func (m *ModifiedQuicReals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModifiedQuicReals.Marshal(b, m, deterministic)
}
func (dst *ModifiedQuicReals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifiedQuicReals.Merge(dst, src)
}
func (m *ModifiedQuicReals) XXX_Size() int {
	return xxx_messageInfo_ModifiedQuicReals.Size(m)
}
func (m *ModifiedQuicReals) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifiedQuicReals.DiscardUnknown(m)
}

var xxx_messageInfo_ModifiedQuicReals proto.InternalMessageInfo

func (m *ModifiedQuicReals) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return Action_ADD
}

func (m *ModifiedQuicReals) GetReals() *QuicReals {
	if m != nil {
		return m.Reals
	}
	return nil
}

type RealForVip struct {
	Real                 *Real    `protobuf:"bytes,1,opt,name=real,proto3" json:"real,omitempty"`
	Vip                  *Vip     `protobuf:"bytes,2,opt,name=vip,proto3" json:"vip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RealForVip) Reset()         { *m = RealForVip{} }
func (m *RealForVip) String() string { return proto.CompactTextString(m) }
func (*RealForVip) ProtoMessage()    {}
func (*RealForVip) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{15}
}
func (m *RealForVip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RealForVip.Unmarshal(m, b)
}
func (m *RealForVip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RealForVip.Marshal(b, m, deterministic)
}
func (dst *RealForVip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RealForVip.Merge(dst, src)
}
func (m *RealForVip) XXX_Size() int {
	return xxx_messageInfo_RealForVip.Size(m)
}
func (m *RealForVip) XXX_DiscardUnknown() {
	xxx_messageInfo_RealForVip.DiscardUnknown(m)
}

var xxx_messageInfo_RealForVip proto.InternalMessageInfo

func (m *RealForVip) GetReal() *Real {
	if m != nil {
		return m.Real
	}
	return nil
}

func (m *RealForVip) GetVip() *Vip {
	if m != nil {
		return m.Vip
	}
	return nil
}

type Flags struct {
	Flags                uint64   `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flags) Reset()         { *m = Flags{} }
func (m *Flags) String() string { return proto.CompactTextString(m) }
func (*Flags) ProtoMessage()    {}
func (*Flags) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{16}
}
func (m *Flags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flags.Unmarshal(m, b)
}
func (m *Flags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flags.Marshal(b, m, deterministic)
}
func (dst *Flags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flags.Merge(dst, src)
}
func (m *Flags) XXX_Size() int {
	return xxx_messageInfo_Flags.Size(m)
}
func (m *Flags) XXX_DiscardUnknown() {
	xxx_messageInfo_Flags.DiscardUnknown(m)
}

var xxx_messageInfo_Flags proto.InternalMessageInfo

func (m *Flags) GetFlags() uint64 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type Somark struct {
	Somark               uint32   `protobuf:"varint,1,opt,name=somark,proto3" json:"somark,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Somark) Reset()         { *m = Somark{} }
func (m *Somark) String() string { return proto.CompactTextString(m) }
func (*Somark) ProtoMessage()    {}
func (*Somark) Descriptor() ([]byte, []int) {
	return fileDescriptor_katran_f815ec687b8a04dc, []int{17}
}
func (m *Somark) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Somark.Unmarshal(m, b)
}
func (m *Somark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Somark.Marshal(b, m, deterministic)
}
func (dst *Somark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Somark.Merge(dst, src)
}
func (m *Somark) XXX_Size() int {
	return xxx_messageInfo_Somark.Size(m)
}
func (m *Somark) XXX_DiscardUnknown() {
	xxx_messageInfo_Somark.DiscardUnknown(m)
}

var xxx_messageInfo_Somark proto.InternalMessageInfo

func (m *Somark) GetSomark() uint32 {
	if m != nil {
		return m.Somark
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "lb.katran.Empty")
	proto.RegisterType((*Bool)(nil), "lb.katran.Bool")
	proto.RegisterType((*Vip)(nil), "lb.katran.Vip")
	proto.RegisterType((*VipMeta)(nil), "lb.katran.VipMeta")
	proto.RegisterType((*Real)(nil), "lb.katran.Real")
	proto.RegisterType((*QuicReal)(nil), "lb.katran.QuicReal")
	proto.RegisterType((*Mac)(nil), "lb.katran.Mac")
	proto.RegisterType((*Stats)(nil), "lb.katran.Stats")
	proto.RegisterType((*Healthcheck)(nil), "lb.katran.Healthcheck")
	proto.RegisterType((*HcMap)(nil), "lb.katran.hcMap")
	proto.RegisterMapType((map[int32]string)(nil), "lb.katran.hcMap.HealthchecksEntry")
	proto.RegisterType((*Reals)(nil), "lb.katran.Reals")
	proto.RegisterType((*Vips)(nil), "lb.katran.Vips")
	proto.RegisterType((*QuicReals)(nil), "lb.katran.QuicReals")
	proto.RegisterType((*ModifiedRealsForVip)(nil), "lb.katran.modifiedRealsForVip")
	proto.RegisterType((*ModifiedQuicReals)(nil), "lb.katran.modifiedQuicReals")
	proto.RegisterType((*RealForVip)(nil), "lb.katran.realForVip")
	proto.RegisterType((*Flags)(nil), "lb.katran.Flags")
	proto.RegisterType((*Somark)(nil), "lb.katran.Somark")
	proto.RegisterEnum("lb.katran.Action", Action_name, Action_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KatranServiceClient is the client API for KatranService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KatranServiceClient interface {
	ChangeMac(ctx context.Context, in *Mac, opts ...grpc.CallOption) (*Bool, error)
	GetMac(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Mac, error)
	AddVip(ctx context.Context, in *VipMeta, opts ...grpc.CallOption) (*Bool, error)
	DelVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Bool, error)
	GetAllVips(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Vips, error)
	ModifyVip(ctx context.Context, in *VipMeta, opts ...grpc.CallOption) (*Bool, error)
	GetVipFlags(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Flags, error)
	AddRealForVip(ctx context.Context, in *RealForVip, opts ...grpc.CallOption) (*Bool, error)
	DelRealForVip(ctx context.Context, in *RealForVip, opts ...grpc.CallOption) (*Bool, error)
	ModifyRealsForVip(ctx context.Context, in *ModifiedRealsForVip, opts ...grpc.CallOption) (*Bool, error)
	GetRealsForVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Reals, error)
	ModifyQuicRealsMapping(ctx context.Context, in *ModifiedQuicReals, opts ...grpc.CallOption) (*Bool, error)
	GetQuicRealsMapping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QuicReals, error)
	GetStatsForVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Stats, error)
	GetLruStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error)
	GetLruMissStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error)
	GetLruFallbackStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error)
	GetIcmpTooBigStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error)
	AddHealthcheckerDst(ctx context.Context, in *Healthcheck, opts ...grpc.CallOption) (*Bool, error)
	DelHealthcheckerDst(ctx context.Context, in *Somark, opts ...grpc.CallOption) (*Bool, error)
	GetHealthcheckersDst(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HcMap, error)
}

type katranServiceClient struct {
	cc *grpc.ClientConn
}

func NewKatranServiceClient(cc *grpc.ClientConn) KatranServiceClient {
	return &katranServiceClient{cc}
}

func (c *katranServiceClient) ChangeMac(ctx context.Context, in *Mac, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/changeMac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetMac(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Mac, error) {
	out := new(Mac)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getMac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) AddVip(ctx context.Context, in *VipMeta, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/addVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) DelVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/delVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetAllVips(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Vips, error) {
	out := new(Vips)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getAllVips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) ModifyVip(ctx context.Context, in *VipMeta, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/modifyVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetVipFlags(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Flags, error) {
	out := new(Flags)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getVipFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) AddRealForVip(ctx context.Context, in *RealForVip, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/addRealForVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) DelRealForVip(ctx context.Context, in *RealForVip, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/delRealForVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) ModifyRealsForVip(ctx context.Context, in *ModifiedRealsForVip, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/modifyRealsForVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetRealsForVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Reals, error) {
	out := new(Reals)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getRealsForVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) ModifyQuicRealsMapping(ctx context.Context, in *ModifiedQuicReals, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/modifyQuicRealsMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetQuicRealsMapping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QuicReals, error) {
	out := new(QuicReals)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getQuicRealsMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetStatsForVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getStatsForVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetLruStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getLruStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetLruMissStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getLruMissStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetLruFallbackStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getLruFallbackStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetIcmpTooBigStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getIcmpTooBigStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) AddHealthcheckerDst(ctx context.Context, in *Healthcheck, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/addHealthcheckerDst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) DelHealthcheckerDst(ctx context.Context, in *Somark, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/delHealthcheckerDst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetHealthcheckersDst(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HcMap, error) {
	out := new(HcMap)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getHealthcheckersDst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KatranServiceServer is the server API for KatranService service.
type KatranServiceServer interface {
	ChangeMac(context.Context, *Mac) (*Bool, error)
	GetMac(context.Context, *Empty) (*Mac, error)
	AddVip(context.Context, *VipMeta) (*Bool, error)
	DelVip(context.Context, *Vip) (*Bool, error)
	GetAllVips(context.Context, *Empty) (*Vips, error)
	ModifyVip(context.Context, *VipMeta) (*Bool, error)
	GetVipFlags(context.Context, *Vip) (*Flags, error)
	AddRealForVip(context.Context, *RealForVip) (*Bool, error)
	DelRealForVip(context.Context, *RealForVip) (*Bool, error)
	ModifyRealsForVip(context.Context, *ModifiedRealsForVip) (*Bool, error)
	GetRealsForVip(context.Context, *Vip) (*Reals, error)
	ModifyQuicRealsMapping(context.Context, *ModifiedQuicReals) (*Bool, error)
	GetQuicRealsMapping(context.Context, *Empty) (*QuicReals, error)
	GetStatsForVip(context.Context, *Vip) (*Stats, error)
	GetLruStats(context.Context, *Empty) (*Stats, error)
	GetLruMissStats(context.Context, *Empty) (*Stats, error)
	GetLruFallbackStats(context.Context, *Empty) (*Stats, error)
	GetIcmpTooBigStats(context.Context, *Empty) (*Stats, error)
	AddHealthcheckerDst(context.Context, *Healthcheck) (*Bool, error)
	DelHealthcheckerDst(context.Context, *Somark) (*Bool, error)
	GetHealthcheckersDst(context.Context, *Empty) (*HcMap, error)
}

func RegisterKatranServiceServer(s *grpc.Server, srv KatranServiceServer) {
	s.RegisterService(&_KatranService_serviceDesc, srv)
}

func _KatranService_ChangeMac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mac)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).ChangeMac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/ChangeMac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).ChangeMac(ctx, req.(*Mac))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetMac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetMac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/GetMac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetMac(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_AddVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).AddVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/AddVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).AddVip(ctx, req.(*VipMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_DelVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).DelVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/DelVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).DelVip(ctx, req.(*Vip))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetAllVips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetAllVips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/GetAllVips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetAllVips(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_ModifyVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).ModifyVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/ModifyVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).ModifyVip(ctx, req.(*VipMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetVipFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetVipFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/GetVipFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetVipFlags(ctx, req.(*Vip))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_AddRealForVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealForVip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).AddRealForVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/AddRealForVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).AddRealForVip(ctx, req.(*RealForVip))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_DelRealForVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealForVip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).DelRealForVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/DelRealForVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).DelRealForVip(ctx, req.(*RealForVip))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_ModifyRealsForVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifiedRealsForVip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).ModifyRealsForVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/ModifyRealsForVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).ModifyRealsForVip(ctx, req.(*ModifiedRealsForVip))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetRealsForVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetRealsForVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/GetRealsForVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetRealsForVip(ctx, req.(*Vip))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_ModifyQuicRealsMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifiedQuicReals)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).ModifyQuicRealsMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/ModifyQuicRealsMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).ModifyQuicRealsMapping(ctx, req.(*ModifiedQuicReals))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetQuicRealsMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetQuicRealsMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/GetQuicRealsMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetQuicRealsMapping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetStatsForVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetStatsForVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/GetStatsForVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetStatsForVip(ctx, req.(*Vip))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetLruStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetLruStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/GetLruStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetLruStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetLruMissStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetLruMissStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/GetLruMissStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetLruMissStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetLruFallbackStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetLruFallbackStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/GetLruFallbackStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetLruFallbackStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetIcmpTooBigStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetIcmpTooBigStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/GetIcmpTooBigStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetIcmpTooBigStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_AddHealthcheckerDst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Healthcheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).AddHealthcheckerDst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/AddHealthcheckerDst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).AddHealthcheckerDst(ctx, req.(*Healthcheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_DelHealthcheckerDst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Somark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).DelHealthcheckerDst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/DelHealthcheckerDst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).DelHealthcheckerDst(ctx, req.(*Somark))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetHealthcheckersDst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetHealthcheckersDst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/GetHealthcheckersDst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetHealthcheckersDst(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _KatranService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lb.katran.KatranService",
	HandlerType: (*KatranServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "changeMac",
			Handler:    _KatranService_ChangeMac_Handler,
		},
		{
			MethodName: "getMac",
			Handler:    _KatranService_GetMac_Handler,
		},
		{
			MethodName: "addVip",
			Handler:    _KatranService_AddVip_Handler,
		},
		{
			MethodName: "delVip",
			Handler:    _KatranService_DelVip_Handler,
		},
		{
			MethodName: "getAllVips",
			Handler:    _KatranService_GetAllVips_Handler,
		},
		{
			MethodName: "modifyVip",
			Handler:    _KatranService_ModifyVip_Handler,
		},
		{
			MethodName: "getVipFlags",
			Handler:    _KatranService_GetVipFlags_Handler,
		},
		{
			MethodName: "addRealForVip",
			Handler:    _KatranService_AddRealForVip_Handler,
		},
		{
			MethodName: "delRealForVip",
			Handler:    _KatranService_DelRealForVip_Handler,
		},
		{
			MethodName: "modifyRealsForVip",
			Handler:    _KatranService_ModifyRealsForVip_Handler,
		},
		{
			MethodName: "getRealsForVip",
			Handler:    _KatranService_GetRealsForVip_Handler,
		},
		{
			MethodName: "modifyQuicRealsMapping",
			Handler:    _KatranService_ModifyQuicRealsMapping_Handler,
		},
		{
			MethodName: "getQuicRealsMapping",
			Handler:    _KatranService_GetQuicRealsMapping_Handler,
		},
		{
			MethodName: "getStatsForVip",
			Handler:    _KatranService_GetStatsForVip_Handler,
		},
		{
			MethodName: "getLruStats",
			Handler:    _KatranService_GetLruStats_Handler,
		},
		{
			MethodName: "getLruMissStats",
			Handler:    _KatranService_GetLruMissStats_Handler,
		},
		{
			MethodName: "getLruFallbackStats",
			Handler:    _KatranService_GetLruFallbackStats_Handler,
		},
		{
			MethodName: "getIcmpTooBigStats",
			Handler:    _KatranService_GetIcmpTooBigStats_Handler,
		},
		{
			MethodName: "addHealthcheckerDst",
			Handler:    _KatranService_AddHealthcheckerDst_Handler,
		},
		{
			MethodName: "delHealthcheckerDst",
			Handler:    _KatranService_DelHealthcheckerDst_Handler,
		},
		{
			MethodName: "getHealthcheckersDst",
			Handler:    _KatranService_GetHealthcheckersDst_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "katran.proto",
}

func init() { proto.RegisterFile("katran.proto", fileDescriptor_katran_f815ec687b8a04dc) }

var fileDescriptor_katran_f815ec687b8a04dc = []byte{
	// 869 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdf, 0x6f, 0xe3, 0x44,
	0x10, 0x26, 0x71, 0xec, 0x36, 0x93, 0xeb, 0xaf, 0x4d, 0x29, 0x55, 0x04, 0x28, 0x5a, 0x40, 0xf4,
	0x0a, 0xe4, 0x68, 0x00, 0x5d, 0xef, 0x24, 0x38, 0xf5, 0x94, 0x06, 0x10, 0x8d, 0x10, 0x2e, 0xca,
	0x0b, 0x4f, 0x5b, 0x7b, 0xcf, 0x59, 0xe2, 0xc4, 0xc6, 0xbb, 0x09, 0xca, 0x7f, 0xc0, 0x23, 0x2f,
	0xfc, 0xbf, 0x68, 0x67, 0xed, 0x74, 0x13, 0xa7, 0x25, 0xdc, 0xdb, 0x4e, 0xf6, 0xfb, 0x66, 0xbe,
	0x6f, 0x77, 0x66, 0x1d, 0x78, 0x32, 0x66, 0x2a, 0x63, 0xd3, 0x4e, 0x9a, 0x25, 0x2a, 0x21, 0xf5,
	0xf8, 0xae, 0x63, 0x7e, 0xa0, 0x3b, 0xe0, 0x5e, 0x4f, 0x52, 0xb5, 0xa0, 0x6d, 0xa8, 0xbd, 0x4e,
	0x92, 0x98, 0x9c, 0xc2, 0x8e, 0x9c, 0x05, 0x01, 0x97, 0xf2, 0xb4, 0xd2, 0xae, 0x9c, 0xed, 0xfa,
	0x45, 0x48, 0x7f, 0x06, 0x67, 0x28, 0x52, 0x0d, 0x60, 0x61, 0x98, 0x15, 0x80, 0xba, 0x5f, 0x84,
	0x84, 0x40, 0x2d, 0x4d, 0x32, 0x75, 0x5a, 0x6d, 0x57, 0xce, 0x5c, 0x1f, 0xd7, 0xa4, 0x05, 0xbb,
	0x58, 0x33, 0x48, 0xe2, 0x53, 0x07, 0x7f, 0x5f, 0xc6, 0xf4, 0x37, 0xd8, 0x19, 0x8a, 0x74, 0xc0,
	0x15, 0x23, 0x6d, 0x70, 0xe6, 0x22, 0xc5, 0x84, 0x8d, 0xee, 0x7e, 0x67, 0xa9, 0xaf, 0x33, 0x14,
	0xa9, 0xaf, 0xb7, 0xc8, 0x31, 0xb8, 0x6f, 0x62, 0x16, 0x49, 0xcc, 0xee, 0xf8, 0x26, 0x40, 0xb5,
	0x5c, 0xf5, 0x63, 0x16, 0x61, 0x76, 0xad, 0xd6, 0x84, 0xf4, 0x12, 0x6a, 0x3e, 0x67, 0xf1, 0x23,
	0x72, 0x4f, 0xc0, 0xfb, 0x93, 0x8b, 0x68, 0x54, 0x08, 0xce, 0x23, 0xfa, 0x35, 0xec, 0xfe, 0x32,
	0x13, 0xc1, 0x7f, 0xb0, 0xf7, 0xa1, 0x2a, 0xc2, 0x9c, 0x59, 0x15, 0x21, 0x7d, 0x0f, 0x9c, 0x01,
	0x0b, 0xc8, 0x21, 0x38, 0x13, 0x16, 0xe4, 0x60, 0xbd, 0xa4, 0x9f, 0x82, 0x7b, 0xab, 0x98, 0x42,
	0xc6, 0xfc, 0x02, 0x77, 0x6a, 0x7e, 0x75, 0x7e, 0x81, 0x71, 0x17, 0x33, 0xe8, 0xb8, 0x4b, 0x5f,
	0x41, 0xe3, 0x07, 0xce, 0x62, 0x35, 0x0a, 0x46, 0x3c, 0x18, 0x6b, 0x79, 0x32, 0x99, 0xb0, 0x6c,
	0x8c, 0x94, 0x3d, 0x3f, 0x8f, 0x6c, 0x49, 0xd5, 0x15, 0x49, 0xf4, 0xef, 0x0a, 0xb8, 0xa3, 0x60,
	0xc0, 0x52, 0xd2, 0x87, 0x27, 0xa3, 0xfb, 0x54, 0x5a, 0xbb, 0x73, 0xd6, 0xe8, 0x52, 0xeb, 0x5c,
	0x11, 0xd7, 0xb1, 0xea, 0xc9, 0xeb, 0xa9, 0xca, 0x16, 0xfe, 0x0a, 0xaf, 0xf5, 0x0a, 0x8e, 0x4a,
	0x10, 0x6d, 0x71, 0xcc, 0x17, 0xa8, 0xca, 0xf5, 0xf5, 0x52, 0xdf, 0xcd, 0x9c, 0xc5, 0x33, 0x9e,
	0x0b, 0x32, 0xc1, 0xcb, 0xea, 0x65, 0x85, 0x76, 0xc0, 0xd5, 0xe7, 0x28, 0xc9, 0x27, 0xe0, 0x66,
	0x7a, 0x91, 0x4b, 0x39, 0xb0, 0xa4, 0x68, 0x80, 0x6f, 0x76, 0xe9, 0x39, 0xd4, 0x86, 0x22, 0x95,
	0x84, 0x42, 0x6d, 0x2e, 0xd2, 0x02, 0xbd, 0xde, 0x10, 0xb8, 0x47, 0x2f, 0xa1, 0x5e, 0xdc, 0x93,
	0x24, 0x9f, 0x81, 0xf7, 0x87, 0x5d, 0xa0, 0x69, 0x51, 0x0a, 0x94, 0x9f, 0x43, 0xe8, 0x5f, 0x15,
	0x68, 0x4e, 0x92, 0x50, 0xbc, 0x11, 0x3c, 0x44, 0x7a, 0x3f, 0xc9, 0x74, 0x6b, 0x3f, 0x05, 0x8f,
	0x05, 0x4a, 0x24, 0x53, 0x34, 0xb7, 0xdf, 0x3d, 0xb2, 0x92, 0x5c, 0xe1, 0x86, 0x9f, 0x03, 0xc8,
	0xc7, 0x50, 0xd3, 0xb9, 0xd0, 0x71, 0xa3, 0x7b, 0xb8, 0x66, 0x47, 0xfa, 0xb8, 0x5b, 0xb4, 0xb5,
	0xf3, 0x60, 0x5b, 0xd3, 0xdf, 0xe1, 0xa8, 0x50, 0x72, 0x6f, 0xe6, 0x7f, 0xe8, 0x38, 0x2f, 0xce,
	0xd5, 0x08, 0x39, 0xde, 0x60, 0x5b, 0x16, 0x87, 0x7b, 0x0b, 0xa0, 0x17, 0xb9, 0xd9, 0x8f, 0x72,
	0x07, 0x66, 0xe6, 0x4a, 0x17, 0xb2, 0x62, 0xa0, 0xfa, 0xb0, 0x81, 0x0f, 0xc0, 0xed, 0xe3, 0x28,
	0x2e, 0x07, 0xd4, 0x74, 0xb8, 0x09, 0x68, 0x1b, 0xbc, 0x5b, 0xd3, 0xb7, 0x0f, 0xf4, 0xf3, 0x79,
	0x0b, 0x3c, 0xe3, 0x89, 0xec, 0x80, 0x73, 0xd5, 0xeb, 0x1d, 0xbe, 0xa3, 0x17, 0xbd, 0xeb, 0x9b,
	0xc3, 0x4a, 0xf7, 0x9f, 0x3a, 0xec, 0xfd, 0x84, 0x05, 0x6f, 0x79, 0x36, 0x17, 0x01, 0x27, 0x9f,
	0x43, 0x3d, 0x18, 0xb1, 0x69, 0xc4, 0xf5, 0xb0, 0xd9, 0x82, 0x06, 0x2c, 0x68, 0xd9, 0x26, 0xf0,
	0x31, 0x3b, 0x07, 0x2f, 0xe2, 0x0a, 0xe7, 0xd2, 0xda, 0xc2, 0x07, 0xaf, 0xb5, 0x46, 0x26, 0x5f,
	0x80, 0xc7, 0xc2, 0x50, 0x9f, 0x0c, 0x59, 0xf5, 0xa9, 0x1f, 0xa8, 0x72, 0xea, 0xa7, 0xe0, 0x85,
	0x3c, 0xd6, 0xf0, 0xb5, 0x63, 0x29, 0x43, 0x9f, 0x01, 0x44, 0x5c, 0x5d, 0xc5, 0x31, 0xb6, 0x76,
	0x59, 0xc9, 0xc1, 0x6a, 0x02, 0x49, 0xbe, 0x84, 0x3a, 0x36, 0xc5, 0x62, 0x6b, 0x35, 0xcf, 0xa0,
	0x11, 0x71, 0x35, 0x14, 0xa9, 0xb9, 0x8b, 0x75, 0x49, 0x76, 0x4d, 0x83, 0x78, 0x0e, 0x7b, 0x2c,
	0xc4, 0xe6, 0xcf, 0xdb, 0xe1, 0x5d, 0x0b, 0x72, 0xdf, 0x25, 0xe5, 0x4a, 0xcf, 0x61, 0x2f, 0xe4,
	0xf1, 0x5b, 0x10, 0x7b, 0x79, 0xa7, 0x2f, 0xec, 0x89, 0xfb, 0xd0, 0x42, 0x6d, 0x98, 0xc8, 0x72,
	0x96, 0x2e, 0xec, 0x47, 0x5c, 0xd9, 0x29, 0x1e, 0xf3, 0x6a, 0xc6, 0xe9, 0x7b, 0x38, 0x31, 0x95,
	0x97, 0x13, 0x31, 0x60, 0x69, 0x2a, 0xa6, 0x11, 0x79, 0x7f, 0x43, 0xf9, 0x25, 0xa8, 0x5c, 0xfc,
	0x5b, 0x68, 0x46, 0x5c, 0x95, 0xb2, 0x94, 0x6f, 0x74, 0xe3, 0x18, 0xe6, 0xda, 0xf1, 0x63, 0xb0,
	0x85, 0x76, 0xf3, 0xd1, 0xb8, 0xc0, 0x8b, 0xbd, 0xc9, 0x66, 0x26, 0x2c, 0x97, 0x2a, 0x53, 0xbe,
	0x81, 0x03, 0x43, 0x19, 0x08, 0x29, 0xb7, 0xa7, 0xbd, 0x40, 0x73, 0x37, 0xd9, 0xac, 0xcf, 0xe2,
	0xf8, 0x8e, 0x05, 0xe3, 0xed, 0xa9, 0x97, 0x40, 0x22, 0xae, 0x7e, 0x0c, 0x26, 0xe9, 0xaf, 0x49,
	0xf2, 0x5a, 0x44, 0xdb, 0x33, 0xbf, 0x83, 0x26, 0x0b, 0x43, 0xeb, 0x1b, 0xc3, 0xb3, 0x9e, 0x54,
	0xe4, 0xc4, 0x02, 0x5a, 0x9b, 0xe5, 0x1b, 0x79, 0x01, 0xcd, 0x90, 0xc7, 0x25, 0xbe, 0xfd, 0x60,
	0x9a, 0xe7, 0xa7, 0x4c, 0x7d, 0x09, 0xc7, 0x11, 0x57, 0x2b, 0x54, 0xa9, 0xb9, 0x8f, 0xcb, 0xc6,
	0xef, 0xe6, 0x9d, 0x87, 0xff, 0x61, 0xbe, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0x57, 0xd1, 0xf1,
	0xa4, 0x57, 0x09, 0x00, 0x00,
}
